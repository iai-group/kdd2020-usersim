"""
Copyright (c) 2019 Uber Technologies, Inc.

Licensed under the Uber Non-Commercial License (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at the root directory of this project. 

See the License for the specific language governing permissions and
limitations under the License.
"""

__author__ = "Alexandros Papangelis"

from copy import deepcopy

import pickle
import os
import datetime
import json

"""
The DialogueEpisodeRecorder is responsible for keeping track of the dialogue 
experience. It has some standard fields and provides a custom field for any 
other information we may want to keep track of.
"""


class DialogueEpisodeRecorder:
    """
    Will record all interactions of the dialogue system, after each dialogue
    turn.
    """

    def __init__(self, path=None):
        """
        Initializes the Dialogue Episode Recorder

        :param path: path to save / load the experience

        """
        self.dialogues = []
        self.current_dialogue = None
        self.path = path

        if path:
            self.load(path)

    def set_path(self, path):
        """
        Sets the path

        :param path: the new path
        :return: nothing
        """
        self.path = path

    def record(self, state, new_state, action,
               input_utterance=None, output_utterance=None,
               force_terminate=False, custom=None):
        """
        Records experience. Currently designed from a Reinforcement Learning
        perspective.

        :param state: the state from which action was taken
        :param new_state: the resulting state after action was taken
        :param action: the action taken from state
        :param input_utterance: utterance received by the agent
        :param output_utterance: utterance generated by the agent
        :param force_terminate: forcefully end current episode and create new
        :param custom: anything else we may want to save and is not captured in
                       the above structures
        :return: Nothing
        """

        # Check if a dialogue is starting or ending
        if self.current_dialogue is None:
            self.current_dialogue = []

        self.current_dialogue.append({
            'state': deepcopy(state),
            'new_state': deepcopy(new_state),
            'action': deepcopy(action),
            'input_utterance':
                deepcopy(input_utterance) if input_utterance else '',
            'output_utterance':
                deepcopy(output_utterance) if output_utterance else '',
            'custom': deepcopy(custom) if custom else ''})

        #print(self.current_dialogue)

        if state.is_terminal() or force_terminate:
            self.dialogues.append(self.current_dialogue)
            self.current_dialogue = []

    def save(self, path=None):
        """
        Saves the experience to a file.

        :param path: the file path to be saved
        :return: nothing
        """

        if not path:
            path = self.path

        if not path:
            path = f'Logs/Dialogues{datetime.datetime.now().isoformat()}.pkl'
            print('No Log file name provided. Using default: {0}'.format(path))

        obj = {'dialogues': self.dialogues}

        try:
            with open(path, 'wb') as file:
                pickle.dump(obj, file, pickle.HIGHEST_PROTOCOL)
            print('Experience logs saved to file: {}.'.format(path))
        except IOError:
            raise IOError('Dialogue Episode Recorder I/O Error when '
                          'attempting to save!')

    def load(self, path):
        """
        Loads experience from a file

        :param path: the path to load the experience from
        :return: nothing
        """

        if not path:
            print('WARNING! Dialogue Episode Recorder: No Log file provided '
                  'to load from.')

        if self.dialogues:
            print('WARNING! Dialogue Episode Recorder is not empty! Loading '
                  'on top of existing experience.')

        if isinstance(path, str):
            if os.path.isfile(path):
                print(f'Dialogue Episode Recorder loading dialogues from '
                      f'{path}...')

                with open(path, 'rb') as file:
                    obj = pickle.load(file)

                    if 'dialogues' in obj:
                        self.dialogues = obj['dialogues']

                    print('Dialogue Episode Recorder loaded from {0}.'
                          .format(path))

            else:
                print('Warning! Dialogue Episode Recorder Log file %s not '
                      'found' % path)
        else:
            print('Warning! Unacceptable value for Dialogue Episode Recorder '
                  'Log file name: %s ' % path)


class DialogueConversationRecorder:
    """
    Will record the main text in conversation, after each dialogue
    turn.
    If required, also store System NLU and NLP response
    Also record the user feedback after terminal state
    """

    def __init__(self, size=None, path=None):
        """
        Initializes the Dialogue Episode Recorder

        :param size: size of the experience (how many dialogues to store)
        :param path: path to save / load the experience

        """
        self.dialogues = []
        self.current_dialogue = None
        self.context = {}
        self.reviews = {}
        self.comments = ''
        self.dialogue_rating = 0
        self.path = path

        if path:
            self.load(path)

    def set_path(self, path):
        """
        Sets the path

        :param path: the new path
        :return: nothing
        """
        self.path = path

    def record(self, dialogue=None, context=None, rating=None, reviews=None, comments=None):
        """
        Records experience. Currently designed from a Reinforcement Learning
        perspective.

        :param dialogue: The dialogue from either user or system
        :param context: The feedback from user while recommending movies
        :return: Nothing
        """

        # Check if a dialogue is starting or ending
        if self.current_dialogue is None:
            self.current_dialogue = []

        if dialogue:
            self.current_dialogue.append(deepcopy(dialogue))
        if context:
            self.context = context
        if rating:
            self.dialogue_rating = rating
        if reviews:
            self.reviews = reviews
        if comments:
            self.comments = comments

    def save(self, path=None):
        """
        Saves the experience to a file.

        :param path: the file path to be saved
        :return: nothing
        """

        if not path:
            path = self.path

        if not path:
            path = f'Logs/Dialogues{datetime.datetime.now().isoformat()}.pkl'
            print('No Log file name provided. Using default: {0}'.format(path))

        obj = {'dialogues': self.current_dialogue, 
               'context': self.context, 
               'reviews': self.reviews, 
               'user rating' : self.dialogue_rating, 
               'user comments': self.comments}

        try:
            with open(path, 'w') as file:
                file.write(json.dumps(obj, indent=4))
                file.close()
            print('Conversation logs saved to file: {}.'.format(path))
        except IOError:
            raise IOError('Dialogue Conversation Recorder I/O Error when '
                          'attempting to save!')

    def load(self, path):
        """
        Loads experience from a file

        :param path: the path to load the experience from
        :return: nothing
        """

        if not path:
            print('WARNING! Dialogue Conversation Recorder: No Log file provided '
                  'to load from.')

        if self.dialogues:
            print('WARNING! Dialogue Conversation Recorder is not empty! Loading '
                  'on top of existing experience.')

        if isinstance(path, str):
            if os.path.isfile(path):
                print(f'Dialogue Conversation Recorder loading dialogues from '
                      f'{path}...')

                with open(path, 'r') as file:
                    obj = json.loads(file)
                    file.close()

                    if 'dialogues' in obj:
                        self.current_dialogue  = obj['dialogues']
                    if 'context' in obj:
                        self.context = obj['context']
                    if 'user rating' in obj:
                        self.dialogue_rating = obj['user rating']
                    if 'user comments' in obj:
                        self.dialogue_rating = obj['user comments']
                    if 'reviews' in obj:
                        self.dialogue_rating = obj['reviews']

                    print('Dialogue Conversation Recorder loaded from {0}.'
                          .format(path))

            else:
                print('Warning! Dialogue Conversation Recorder Log file %s not '
                      'found' % path)
        else:
            print('Warning! Unacceptable value for Dialogue Conversation Recorder '
                  'Log file name: %s ' % path)